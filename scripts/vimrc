"Start Almighty VIM

set nocompatible
set title
filetype plugin indent on
set smartindent
syntax enable
set grepprg=grep\ -nH\ $*
syntax on
set t_Co=256
set history=1000
set showmode
setl autoread

let dark=$DARK "export DARK=1 to use solarized
if dark == 1
    set background=dark
    let g:solarized_contrast="high" | colorscheme solarized
else
    colorscheme Tomorrow
endif

if has('cmdline_info')
    set ruler
    set rulerformat=%40(%=\[b%n\]%y%m%r%w\ %l/%L,%c%V\ %P%)
    set showcmd
endif

if has('gui_running')
    "set guifont=Inconsolata\ 12
    "set guifont=Consolas
    "set guifont=GohuFont
    set guifont=Terminess\ Powerline\ 10
    set guioptions-=m  "remove menu bar
    set guioptions-=T  "remove toolbar
    set guioptions-=r  "remove right-hand scroll bar
    set guioptions-=L  "remove left-hand scroll bar
    set guicursor+=i:block-Cursor   "Change cursor from beam
    hi Visual  gui=italic,underline
    hi Pmenu guibg=LightSeaGreen guifg=black
    hi PmenuSel guibg=SteelBlue guifg=white gui=bold
    let g:airline_symbols = get(g:, 'airline_symbols', {}) "airline symbol issue
    let g:airline_symbols.space = "\ua0"
    hi VertSplit guifg=NONE guibg=NONE gui=NONE
endif

if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

set laststatus=2 "for airline
set showtabline=0
set noshowmode

set backspace=indent,eol,start
set linespace=0
set showmatch
set incsearch
set hlsearch
set winminheight=0
set ignorecase
set smartcase
set wildmenu
set wildignore=*.dll,*.o,*.obj,*.bak,*.exe,*.pyc,*.jpg,*.gif,*.png
set wildmode=list:longest,full
set scrolljump=2
set scrolloff=1
set gdefault
set autoindent
set shiftwidth=4
set tabstop=4
set softtabstop=4
set expandtab
set cino+=:0,l1,g0,(0,j1,t0
set matchpairs+=<:>
set comments=sl:/*,mb:*,elx:*/
set t_vb=
set path+=$HOME "for my gf ;)

hi VertSplit cterm=NONE ctermfg=NONE ctermbg=NONE
"highlight of autocomp. menu
"hi Pmenu ctermfg=0 ctermbg=6
"hi PmenuSel ctermfg=7 ctermbg=4
"highlight of search
"hi Search cterm=NONE ctermfg=black ctermbg=yellow
"hilight of braces
hi MatchParen cterm=none ctermbg=green ctermfg=blue

"highlight ExtraWhitespace ctermbg=red guibg=red
"match ExtraWhitespace /\s\+$/
"autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
"autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
"autocmd InsertLeave * match ExtraWhitespace /\s\+$/
"autocmd BufWinLeave * call clearmatches()
highlight link NERDTreeExecFile Normal

set textwidth=118
"set textwidth=78
set wrap
set formatoptions+=t
let Tlist_WinWidth=40
let Tlist_Exit_OnlyWindow = 1

autocmd FileType c,cpp,java,python set formatoptions+=t
autocmd BufNewFile,BufRead *.json set ft=javascript
autocmd BufNewFile,BufRead *.protocol set ft=cpp
autocmd BufNewFile,BufRead *.x set ft=cpp

nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
nnoremap <C-P> @:
inoremap <C-f> <C-x><C-o><C-p>
"nnoremap <silent> <F3> :TlistToggle<CR>
nnoremap <silent> <F3> :TagbarToggle<CR>
nnoremap <F4> :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
nnoremap <F5> <C-w>w
nnoremap <silent> <F6> :call LoadCscope()<CR>
nnoremap <silent> <F7> :call SwitchBack()<CR>
nnoremap <silent> q :q<CR>
nnoremap <silent> <leader>; :bp<CR>
nnoremap <silent> <leader>, :bn<CR>
map <C-\> :bel vsp <CR>:exec("tag ".expand("<cword>"))<CR><CR>
vnoremap // y/<C-R>"<CR>

let $GROFF_NO_SGR=1
source $VIMRUNTIME/ftplugin/man.vim
nmap K :Man <cword><CR>

set tags+=/usr/include/tags
set tags+=tags;/
"backup
set backupdir=~/.vim/backup,.
set directory=~/.vim/backup,.
"set nobackup       "no backup files
"set noswapfile     "no swap files

function! SwitchBack()
    if &background == 'light'
        set background=dark
    else
        set background=light
    endif
endfunction

function! LoadCscope()
  let db = findfile("cscope.out", ".;")
  if (!empty(db))
    let path = strpart(db, 0, match(db, "/cscope.out$"))
    set nocscopeverbose " suppress 'duplicate connection' error
    exe "cs add " . db . " " . path
    set cscopeverbose
  endif
endfunction
au BufEnter /* "call LoadCscope()

au BufNewFile,BufRead,BufEnter *.cpp,*.hpp,*.h set omnifunc=omni#cpp#complete#Main
autocmd Filetype java setlocal omnifunc=javacomplete#Complete
"autocmd Filetype java setlocal completefunc=javacomplete#CompleteParamsInfo "for supertab
"au BufNewFile,BufRead *.hpp,*.h,*.cpp set syntax=cpp11
"autocmd BufEnter * redraw! "redraw
set completeopt-=preview

let OmniCpp_NamespaceSearch = 1
let OmniCpp_GlobalScopeSearch = 1
let OmniCpp_ShowAccess = 1
let OmniCpp_ShowPrototypeInAbbr = 1
let OmniCpp_MayCompleteDot = 0
let OmniCpp_MayCompleteArrow = 0
let OmniCpp_MayCompleteScope = 0
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]

let g:airline_powerline_fonts = 1
"let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='murmur'

let NERDTreeIgnore=['\.o$', '\~$']
call pathogen#infect() 

let g:SuperTabDefaultCompletionType = "<C-X><C-O>"
let g:SuperTabDefaultCompletionType = "context"

"map <C-F12> :!ctags -R --sort=no --c++-kinds=+p --fields=+iaS --extra=+q --exclude=dir/* --totals .<CR>
"ctags -R --c++-kinds=+p --fields=+iaS --extra=+q -f ~/.vim/tags/stdlibcpp /usr/include/c++/4.2.4/

iab comment // --------------------------------------------------------------------------
\<CR>
\Purpose : <CR>
\Input   : <CR>
\Ouptut  : <CR>
\I/O     : <CR>
\Retrun  :
\<CR>--------------------------------------------------------------------------
\<Up><Up><Up><Up><Up>

